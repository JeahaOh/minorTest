package bitcamp.java110.cms.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import bitcamp.java110.cms.annotaion.Component;
import bitcamp.java110.cms.dao.DaoException;
import bitcamp.java110.cms.dao.ManagerDao;
import bitcamp.java110.cms.domain.Manager;

@Component
public class ManagerMysqlDao implements ManagerDao {
    private String url = "jdbc:mariadb://localhost:3306/studydb";
    private String user = "study";
    private String pwd = "1111";
    
    @Override
    public int insert(Manager manager) {
        Connection con = null;
        Statement stmt = null;
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(url, user, pwd);
            /*  매니저 정보를 입력 할 때 p1_memb 테이블과 p1_mgr 테이블에
                분산 입력 해야.
                두 테이블에 모두 입력 성공을 해야만 완료 하도록,
                두 insert 작업을 한 transaction으로 묶는다.
                 => sql을 서버에 보낸후
                    클라이언트가 최종 완료 신호를 보내기 전까지는
                    처리를 보류 하도록 설정.
                    con.setAutoCommit(); default = true.
            */
            con.setAutoCommit(false);
            
            stmt = con.createStatement();
            
            /*
            insert into p1_memb(name, email, pwd, tel, cdt)
            values('NAME','EMAIL','PWD','TEL',now());
            */
            String sql1 = 
                    " insert into p1_memb(name, email, pwd, tel, cdt) "+
                    "values('" + manager.getName() +
                    "','" + manager.getEmail() + 
                    "',password('" + manager.getPassword() + 
                    "'),'" + manager.getTel() +
                    "',now())";
            
            System.out.println("\n" + sql1);
            
            //  p1_memb 테이블에 회원 기본 정보를 입력 한 후,
            //  자동 생성된 회원 번호를 리턴 받는다.
            stmt.executeUpdate(sql1, Statement.RETURN_GENERATED_KEYS);
            
            //  insert를 실행한 후, 리턴 받은 자동 증가 PK 값을 꺼내기.
            ResultSet autogeneratedKeys = stmt.getGeneratedKeys();
            autogeneratedKeys.next();
            int membNo = autogeneratedKeys.getInt(1);
            autogeneratedKeys.close();
            
            /*  회원 번호로 매니저 테이블에 직위 정보를 입력.
            insert into p1_mgr(mrno,posi)
            values(membNo, 'POSI')
            */
            
            String sql2 =
                    "insert into p1_mgr(mrno,posi)" + 
                    " values(" + membNo +
                    ", '" + manager.getPosition() + 
                    "')";
            System.out.println(sql2 + "\n");
            stmt.executeUpdate(sql2);
            
            //  두 insert문이 모두 성공했을 때만 commit을 한다.
            con.commit();
            
            return 1;
            
        }   catch (Exception e) {
                throw new DaoException(e);
        }   finally {
            try {stmt.close();} catch(Exception e) {    }
            try {con.close();} catch(Exception e) {    }
        }
    }

    @Override
    public List<Manager> findAll() {
        ArrayList<Manager> list = new ArrayList<>();
        
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            //  java.sql.Driver 구현체를 로딩.
            //  ->  해당 클래스의 객체를 만들어 DriverManager에 등록한다.
            Class.forName("org.mariadb.jdbc.Driver");
            
            /* -> DriverManager에게 java.sql.Connection 객체를 요구,
               -> DriverManager는 등록된 Driver 들 중에서 요구 사항에 맞는
                    드라이버를 찾아 connect()를 호출.
                    그리고 connect() 의 리턴값을 그대로 리턴해줌.
            */
            con = DriverManager.getConnection(url, user, pwd);
            
            // -> query문을 작성할 객체를 준비.
            stmt = con.createStatement();
            
            /*  ->  select 문을 작성한다.
            select m.name, m.email, mr.posi
            from p1_mgr mr
                inner join p1_memb m on m.mno = mr.mrno
            */
            String sql = " select " +
                    " m.mno, " +
                    " m.name, " +
                    " m.email, " +
                    " mr.posi " + 
                    " from p1_mgr mr " + 
                    " inner join p1_memb m on m.mno = mr.mrno";
            
            System.out.println("\n" + sql + "\n");
            rs = stmt.executeQuery(sql);
            
            
            //  서버에 생성된 질의 결과를 한 개씩 가져온다.
            while(rs.next()) {
                Manager mgr = new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setPosition(rs.getString("posi"));
                
                list.add(mgr);
            }
        }   catch(Exception e) {
                throw new DaoException(e);
        }   finally {
            try { rs.close(); } catch(Exception e) {   }
            try { stmt.close(); } catch(Exception e) {   }
            try { con.close(); } catch(Exception e) {   }
        }
        return list;
    }

    @Override
    public Manager findByEmail(String email) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(url, user, pwd);
            stmt = con.createStatement();

            /*
            select m.mno, m.name, m.email, m.pwd, m.tel, mr.posi
            from p1_mgr mr
                inner join p1_memb m on m.mno = mr.mrno
            where m.email = '이메일'
            */
            String sql = " select m.mno, m.name, m.email, m.pwd, m.tel mr.posi" + 
                    " from p1_mgr mr" + 
                    " inner join p1_memb m on m.mno = mr.mrno" +            

                    " where m.email = '" + email + "'";
            
            System.out.println(sql);
            rs = stmt.executeQuery(sql);
            
            if(rs.next()) {
                Manager m = new Manager();
                
                m.setNo(rs.getInt("mno"));
                m.setName(rs.getString("name"));
                m.setEmail(rs.getString("email"));
                m.setPassword(rs.getString("pwd"));
                m.setTel(rs.getString("tel"));
                m.setPosition(rs.getString("posi"));
                
                return m;
            }
            return null;
            
        }   catch (Exception e) {
                throw new DaoException(e);
        }   finally {
            try {rs.close();}catch(Exception e) {  }
            try {stmt.close();}catch(Exception e) {  }
            try {con.close();}catch(Exception e) {  }
        }
    }

    @Override
    public Manager findByNo(int no) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(url, user, pwd);
            stmt = con.createStatement();
            
            /*
            select m.mno, m.name, m.email, m.pwd, m.tel, mr.posi
            from p1_mgr mr
                inner join p1_memb m on m.mno = mr.mrno
            where m.mno = 번호
            */
            String sql =
                    " select m.mno, m.name, m.email, m.pwd, m.tel, mr.posi " + 
                    " from p1_mgr mr " + 
                    " inner join p1_memb m on m.mno = mr.mrno " + 
                    " where m.mno =" + no;
            System.out.println("\n" + sql);
            rs = stmt.executeQuery(sql);
            
            if(rs.next()) {
                Manager m = new Manager();
                
                m.setNo(rs.getInt("mno"));
                m.setName(rs.getString("name"));
                m.setEmail(rs.getString("email"));
                m.setPassword(rs.getString("pwd"));
                m.setTel(rs.getString("tel"));
                m.setPosition(rs.getString("posi"));
                
                return m;
            }
            return null;
            
        }   catch (Exception e) {
                throw new DaoException(e);
        }   finally {
            try {rs.close();}catch(Exception e) {  }
            try {stmt.close();}catch(Exception e) {  }
            try {con.close();}catch(Exception e) {  }
        }
    }
    
    public int delete(int no) {
        Connection con = null;
        Statement stmt = null;
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(url, user, pwd);
            con.setAutoCommit(false);
            stmt = con.createStatement();
            
//          delete from p1_mgr where mrno = 번호
            String sql1 = "delete from p1_mgr where mrno = " + no;
            System.out.println("\n" + sql1);
            int count = stmt.executeUpdate(sql1);
            
            if(count == 0) { return 0; }
            
//          delete from p1_memb where mno = 번호
            String sql2 = "delete from p1_memb where mno = " + no;
            System.out.println(sql2);
            stmt.executeUpdate(sql2);
            con.commit();
            
            return 1;
            
        }catch(Exception e) { 
                throw new DaoException(e);
        }finally {
            try {stmt.close();}catch(Exception e) {  }
            try {con.close();}catch(Exception e) {  }
        }
    }
}